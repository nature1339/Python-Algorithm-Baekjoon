
# 약수
# 12의 약수: 1, 2, 3, 4, 6, 12 -> 12가 이 수로 나누어 떨어진다.

# 최대공약수: 두 개의 수가 주어졌을 때, 두 개의 공통된 약수들 중 가장 큰 약수
# 12, 18
# 12의 약수: 1, 2, 3, 4, 6, 12
# 18의 약수: 1, 2, 3, 6, 9, 18
# 12와 18의 최대공약수: 6

# 최소공배수: 두 개의 수가 주어졌을 때, 두 각각의 배수 중 가장 작은 수
# 12의 배수: 12, 24, 36, 48, 60...
# 18의 배수: 18, 36, 54, 72, 90...
# 12와 18의 최소공배수: 36    => (12 * 18 / (12와 18의 최대공약수))


# 최대공약수 (GCD)
# GCD(a, b) == GCD(b, a % b)
# b가 0일 경우에 최대공약수는 a이다.-> 유클리드 호제법
# 두 개의 숫자 a, b -> "a와 b의 최대공약수는 b와 (a % b)의 최대공약수와 같다." -> 유클리드 호제법

# gcd(12, 18) = gcd(18, 12 % 18) = gcd(18, 12)
# gcd(18, 12) = gcd(12, 18 % 12) = gcd(12, 6)
# gcd(12, 6) = gcd(6, 12 % 6) = gcd(6, 0)
# gcd(6, 0) = gcd(0, 6 % 0) 불가. 최대공약수는 6
l = map(int, input().split())

def gcd(a, b):
    if b == 0:
        return a

    return gcd(b, a % b)

maximum = gcd(l[0], l[1]) #함수호출
minimum = l[0] * l[1] / maximum

print(maximum)
print(minimum)
